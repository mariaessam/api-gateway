package com.cit.vericash.api.gateway.service;

import com.cit.vericash.api.gateway.model.Constants;
import com.cit.vericash.api.gateway.util.*;
import com.cit.vericash.portal.backend.data.PersistService;
import com.cit.vericash.portal.backend.data.QueryService;
import com.cit.vericash.portal.backend.model.dao.*;
import com.cit.vericash.portal.backend.model.message.Message;
import com.cit.vericash.portal.backend.util.JexlUtil;
import com.cit.vericash.portal.backend.util.PropertyLoader;
import com.cit.vericash.portal.backend.util.VericashLogger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.stereotype.Service;


import java.io.File;
import java.util.*;

@Service
@EnableAsync
@Scope( proxyMode = ScopedProxyMode.TARGET_CLASS )
public class AuditService {

    @Autowired
    PropertyLoader propertyLoader;

    @Autowired
    PersistService persistService;

    @Autowired
    QueryService queryService;

    static Map<String,String> servicesHM=new HashMap<String,String>();

    private final String AUDIT_TRAIL_ENTITY_CODE = "1009";

    @Async("threadPoolTaskExecutor")
    public void audit(Message message, String fullName, String failureReason, String requestURI) {
        if (message == null) {
            return;
        }
        String serviceCode = message.getHeader().getAttributeAsString(Constants.HEADER_SERVICE_CODE);
        String serviceName = message.getHeader().getAttributeAsString(Constants.HEADER_SERVICE_NAME);

        if(skipAudit(requestURI))
            return;
//        if (!auditCacheService.isAuditEnabled(message) && failureReason == null) {
//            return;
//        }
        PersistMessage persistMessage = new PersistMessage();
        persistMessage.setEntityCode(AUDIT_TRAIL_ENTITY_CODE);
        // AuditTrail entity model
        persistMessage.setAutoGeneratedIdName("id");
        persistMessage.setPersistentObject(getAudit(message, serviceCode, fullName,failureReason));
        long id = persistService.persist(persistMessage);
    }

    private boolean skipAudit(String requestURI) {
        String skipAuditUrisStr=propertyLoader.getPropertyAsString("skip.audit.uri",Constants.GATEWAY_FOLDER_NAME,Constants.GATEWAY_CONFIG_FILE_NAME);
        String[] skipAuditUris=skipAuditUrisStr.split("[,]");
        for (int i = 0; i <skipAuditUris.length ; i++) {
            String skipAuditUri=skipAuditUris[i];
            if(requestURI.contains(skipAuditUri))
                return true;
        }
        return false;
    }

    private EntityModel getAudit(Message message, String serviceCode, String fullName, String failureReason) {
        String userName;
        String userFullName;
        if (serviceCode.equals(Constants.LOGIN_SERVICE_CODE)) {
            userName = message.getPayload().getAttributeAsString("username");
            userFullName = fullName;
        } else {
            userName = message.getHeader().getAttributeAsString(Constants.HEADER_USER_NAME);
            userFullName = message.getHeader().getAttributeAsString(Constants.HEADER_USER_FULL_NAME);
        }

        String serviceName = message.getHeader().getAttributeAsString(Constants.HEADER_SERVICE_NAME);
        Long userId = message.getHeader().getAttributeAsLong(Constants.HEADER_USER_ID);
        EntityModel auditTrial = new EntityModel();
        auditTrial.setAttribute("createdAt", DateFormatterUtil.format(new Date()));
        auditTrial.setAttribute("userName", userName);
        String description=getDescription(serviceCode, message);
        auditTrial.setAttribute("description", description==null?getServiceName(serviceCode):description);
        VericashLogger.info("Audit Description :" + auditTrial.get("description"));
        VericashLogger.info(getDescription(serviceCode, message));
        auditTrial.setAttribute("detailedDescription", getDetailedDescription(serviceName, serviceCode, message));
        VericashLogger.info(getDetailedDescription(serviceName, serviceCode, message));
        auditTrial.setAttribute("userId", userId);
        auditTrial.setAttribute("userFullName", userFullName);
        auditTrial.setAttribute("serviceCode", Long.parseLong(serviceCode));
        Long walletId=getWalletId(userName,message.getHeader().getAttributeAsLong("walletId"));
        auditTrial.setAttribute("walletId", walletId);
        auditTrial.setAttribute("failureReason", failureReason);
        if (failureReason == null) {
            auditTrial.setAttribute("status", 1);
        } else {
            auditTrial.setAttribute("status", 0);
        }


        return auditTrial;
    }

    private boolean isAuditingEnabled(ResultSet auditConfiguration) {
        Integer isEnabled = CommonUtil.getParameterFromResultSetAsInteger(auditConfiguration, "IS_ENABLED");
        return isEnabled == 1;
    }

    private ResultSet getAuditConfiguration(String serviceCode, String walletId) {
        String query = propertyLoader.loadQuery("audit.configuration.get.query");
        List<Criteria> criteriaList = new ArrayList<Criteria>();
        criteriaList.add(new Criteria("SERVICE_CODE", serviceCode, Criteria.Type.Text, Criteria.Operator.Equals));
        criteriaList.add(new Criteria("WALLET_ID", walletId, Criteria.Type.Number, Criteria.Operator.Equals));
        QueryMessage queryMessage = CommonUtil.getQueryMessage(query, criteriaList, null);
        ResultSet auditConfiguration = null;
        try {
            auditConfiguration = queryService.executeQuery(queryMessage);
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (auditConfiguration == null || auditConfiguration.getRecords() == null || auditConfiguration.getRecords().isEmpty()) {
            return null;
        }
        return auditConfiguration;
    }
    private Long getWalletId(String username, Long walletId)
    {
        VericashLogger.info("WalletId: "+walletId);
        VericashLogger.info("Username: "+username);
        if(walletId==1234L)
        {
            String userWalletQuery=propertyLoader.getPropertyAsString("get.user.wallet.query",Constants.GATEWAY_FOLDER_NAME,"queries");
            QueryMessage queryMessage =new QueryMessage(userWalletQuery);
            queryMessage.setCriteriaList(new CriteriaList(
                    new Criteria("USERNAME", username, Criteria.Type.Text, Criteria.Operator.Equals),
                    new Criteria("LDAP_USER_NAME", username, Criteria.Type.Text, Criteria.Operator.Equals)).asList());
            ResultSet resultSet=queryService.executeQuery(queryMessage);
            if(resultSet!=null && resultSet.getRecords().size()>0)
            {
                Record commonRecord =resultSet.getRecords().get(0);
                Long businessEntityId= commonRecord.getFieldAsLong("BUSINESS_ENTITY_ID");
                Long dbWalletId= commonRecord.getFieldAsLong("WALLET_ID");
                if(dbWalletId!=null)
                    return dbWalletId;
                VericashLogger.info("walletId: "+dbWalletId+"businessEntityId: "+businessEntityId);
                return businessEntityId;
            }
        }
        return walletId;
    }
    private String getServiceName(String serviceCode)
    {
        if(servicesHM.containsKey(serviceCode))
            return servicesHM.get(serviceCode);
        QueryMessage queryMessage =new QueryMessage("select SERVICE_NAME from PORTAL_SERVICES {where_criteria}");
        queryMessage.setCriteriaList(new CriteriaList(new Criteria("SERVICE_CODE", serviceCode, Criteria.Type.Text, Criteria.Operator.Equals)).asList());
        ResultSet resultSet=queryService.executeQuery(queryMessage);
        if(resultSet!=null && resultSet.getRecords().size()>0)
        {
            Record commonRecord =resultSet.getRecords().get(0);
            String serviceName= commonRecord.getFieldAsString("SERVICE_NAME");
            servicesHM.put(serviceCode,serviceName);
        }
        return servicesHM.get(serviceCode);
    }
    private String getDescription(String serviceCode, Message message) {
        String property = new StringBuilder(serviceCode).append(".audit.description").toString();
        String descriptionExpression = propertyLoader.getPropertyAsString(property, Constants.GATEWAY_FOLDER_NAME, "audit");
        String description = null;
        try {
            description = JexlUtil.evaluateExpression(descriptionExpression, "message", message);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return description;
    }

    private String getDetailedDescription(String serviceName, String serviceCode, Message message) {
        String detailedDescription = null;
        try {
            String templateFileContents = FileUtils.getFileContents(getTemplateFilePath(serviceName, serviceCode));
            detailedDescription = JexlUtil.evaluateExpression(templateFileContents, "message", message);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return detailedDescription;
    }

    private String getTemplateFilePath(String serviceName, String serviceCode) {
        String userHome = System.getenv("PORTAL_CONFIG_HOME");
        String configFolder = "vericash-config";
        String filePath = "";
        if (isProjectConfigFileExist("templates", "audit")) {
            String project = System.getenv("PROJECT");
            configFolder = project + "-config";
        }
//        StringBuilder filePath = new StringBuilder(userHome).append(File.separator).append("templates")
//                .append(File.separator).append("audit").append(File.separator).append("product").append(File.separator).append(serviceName).append(File.separator)
//                .append(serviceCode).append(".template");

        StringBuilder configDir = new StringBuilder(userHome).append(File.separator + configFolder);
        configDir.append(File.separator + "templates").append(File.separator);
        configDir.append("audit").append(File.separator).append(serviceName).append(File.separator)
                .append(serviceCode).append(".template");
        filePath = configDir.toString();

        return filePath;
    }

    private boolean isProjectConfigFileExist(String folderName, String fileName) {
        String userHome = System.getenv("PORTAL_CONFIG_HOME");
        String project = System.getenv("PROJECT");
        StringBuilder filePath = new StringBuilder(userHome + File.separator + (project + "-config") + File.separator);
        filePath.append(folderName).append(File.separator);
        filePath.append(fileName).append(".properties");
//        VericashLogger.info("filePath: "+filePath);
        File currentFile = new File(filePath.toString());
        return currentFile.exists();
    }


}
